package shapes;

import java.awt.Color;
import java.awt.Graphics;
import java.io.Serializable;

public class Rectangle implements Shape, Serializable {

	private Point upLeft;
	private int a;
	private int b;
	private boolean isSelected = false;

	private Color border;
	private Color inner;

	public Rectangle(Point upLeft, int a, int b, Color border, Color inner) {
		this.upLeft = upLeft;
		this.a = a;
		this.b = b;
		this.border = border;
		this.inner = inner;

	}

	public boolean getIsSelected() {
		return isSelected;
	}

	public void setIsSelected(boolean b) {
		isSelected = b;
	}

	public Point getUpLeft() {
		return upLeft;
	}

	public void setUpLeft(Point upLeft) {
		this.upLeft = upLeft;
	}

	public int getA() {
		return a;
	}

	public void setA(int a) {
		this.a = a;
	}

	public int getB() {
		return b;
	}

	public void setB(int b) {
		this.b = b;
	}

	public void draw(Graphics g) {
		g.setColor(border);
		g.drawRect(upLeft.getX(), upLeft.getY(), a, b);

		g.setColor(inner);
		g.fillRect(upLeft.getX() + 1, upLeft.getY() + 1, a - 1, b - 1);
		if (isSelected == true)
			selected(g);
	}

	public boolean contains(int x, int y) {
		return (upLeft.getX() <= x && x <= (upLeft.getX() + a) && upLeft.getY() <= y && y <= (upLeft.getY() + b));

	}

	public void selected(Graphics g) {
		
		g.setColor(Color.BLUE);
		upLeft.selected(g);
		new Point(upLeft.getX() + a, upLeft.getY() + b).selected(g);
		new Line(new Point(upLeft.getX() + a, upLeft.getY()), new Point(upLeft.getX(), upLeft.getY() + b)).selected(g);

	}

	public String toString() {
		String log = "Rectangle X:" + upLeft.getX() + " Y:" + upLeft.getY() + " A:" + a + " B:" + b + " border " + "#"
				+ Integer.toHexString(getBorder().getRGB()).substring(2) + " inner " + "#"
				+ Integer.toHexString(getInner().getRGB()).substring(2);
		// System.out.println(log);
		return log;

	}

	public Color getBorder() {
		return border;
	}

	public void setBorder(Color border) {
		this.border = border;
	}

	public Color getInner() {
		return inner;
	}

	public void setInner(Color inner) {
		this.inner = inner;
	}

}
